<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2025-07-06T14:29:14.793Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;windows_NSIS_package_setup_error&#39;</title>
    <link href="http://yoursite.com/2025/07/06/windows-NSIS-package-setup-error/"/>
    <id>http://yoursite.com/2025/07/06/windows-NSIS-package-setup-error/</id>
    <published>2025-07-06T14:09:57.000Z</published>
    <updated>2025-07-06T14:29:14.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows环境NSIS打包的文件，安装错误，错误："><a href="#windows环境NSIS打包的文件，安装错误，错误：" class="headerlink" title="windows环境NSIS打包的文件，安装错误，错误："></a>windows环境NSIS打包的文件，安装错误，错误：</h1><p>5434545</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;windows环境NSIS打包的文件，安装错误，错误：&quot;&gt;&lt;a href=&quot;#windows环境NSIS打包的文件，安装错误，错误：&quot; class=&quot;headerlink&quot; title=&quot;windows环境NSIS打包的文件，安装错误，错误：&quot;&gt;&lt;/a&gt;windo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>centos7编译libwebp</title>
    <link href="http://yoursite.com/2019/12/31/centos7-compile-libwebp/"/>
    <id>http://yoursite.com/2019/12/31/centos7-compile-libwebp/</id>
    <published>2019-12-31T11:20:56.000Z</published>
    <updated>2019-12-31T02:06:28.794Z</updated>
    
    <content type="html"><![CDATA[<p>下载源码包:<br> <a href="https://github.com/webmproject/libwebp/releases" target="_blank" rel="noopener">https://github.com/webmproject/libwebp/releases</a><br> libwebp-v1.0.3.zip</p><h1 id="1-jepg、png、tiff插件安装"><a href="#1-jepg、png、tiff插件安装" class="headerlink" title="1.jepg、png、tiff插件安装"></a>1.jepg、png、tiff插件安装</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libjpeg libpng freetype libjpeg-devel libpng-devel freetype-devel -y</span><br><span class="line">yum install -y libgeotiff-devel</span><br></pre></td></tr></table></figure><h1 id="2-简单编译"><a href="#2-简单编译" class="headerlink" title="2.简单编译"></a>2.简单编译</h1><p> 仅仅编译examples/cwebp和examples/dwebp，与static library src/libwebp.a。<br> 使用makefile.unix进行编译<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd libwebp-1.0.3&#x2F;  </span><br><span class="line">make -f makefile.unix</span><br></pre></td></tr></table></figure><br> 成功：<br> <img src="https://i.loli.net/2019/12/31/8Ttez3RZUI5bQMC.png" alt=""></p><h1 id="3-完整编译"><a href="#3-完整编译" class="headerlink" title="3.完整编译"></a>3.完整编译</h1><pre><code> yum install gcc make autoconf automake libtool cd libwebp-1.0.3/   #生成configure脚本 ./autogen.sh ./configuremakemake install</code></pre><p> 会生成如下目录和文件：<br>/usr/local/include/webp/decode.h<br>/usr/local/include/webp/encode.h<br>/usr/local/include/webp/types.h<br>/usr/local/lib/libwebp.*<br>/usr/local/bin/cwebp<br>/usr/local/bin/dwebp  </p><p>如需你需要生成libwebpdecoder， ./configure 需要带上选项：<br>–enable-libwebpdecoder<br>更多选项信息请使用以下命令查看：<br>./configure –help<br><img src="https://i.loli.net/2019/12/31/rdcH5t7imOq6anA.png" alt=""><br><img src="https://i.loli.net/2019/12/31/NyG3icFATpHC4ZW.png" alt=""></p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h1><p>cwebp -q 70 test.jpg -o out.webp<br><img src="https://i.loli.net/2019/12/31/jPI41a7CNxos2rn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载源码包:&lt;br&gt; &lt;a href=&quot;https://github.com/webmproject/libwebp/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/webmproject/libweb
      
    
    </summary>
    
    
    
      <category term="centos7 libwebp" scheme="http://yoursite.com/tags/centos7-libwebp/"/>
    
  </entry>
  
  <entry>
    <title>proj.4多线程支持说明</title>
    <link href="http://yoursite.com/2019/12/31/proj-4-multithread-supprot/"/>
    <id>http://yoursite.com/2019/12/31/proj-4-multithread-supprot/</id>
    <published>2019-12-31T06:36:16.000Z</published>
    <updated>2019-12-31T06:54:20.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近对公司的平台进行多线程绘制改造，咱们公司使用的坐标转换时基于proj.4做的，版本是4.7，偶尔出现部分坐标点转换失败的错误。经过查资料，版本4.7对多线程支持不够友好，于是升级到项目（vs2005）所支持的最高版本5.2，结果还是出现问题。查看5.2版本源码，里面加了大量互斥锁相关内容，感觉这次更新方向是对的，但是还需要完善某些地方。于是调试代码，看哪里导致错误。<br>发现每个坐标定义对象PJ都有一个上下文的成员变量。一旦last_error非0时，就会停止转换。<br><img src="https://i.loli.net/2019/12/31/8y5KSv91XmHaqCk.png" alt=""><br><img src="https://i.loli.net/2019/12/31/HQxVY2auOMWm67X.png" alt=""><br>于是查找这个变量设置值得地方：<br><img src="https://i.loli.net/2019/12/31/FwfeOku5XHsxWrV.png" alt=""></p><p>发现默认的last_error变量是全局共享的，项目在多个线程之中使用这样一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pj_init_plus(&quot;&quot;)</span><br></pre></td></tr></table></figure><p>由于pj_init_plus传的值是空字符串，导致此处会设置last_error为-1。由于程序是多线程跑的，其他地方使用坐标转换的时候，发现last_error为-1，就会停止转换导致错误。</p><p>官网给出了多线程处理方案：<br><a href="https://proj.org/development/threads.html" target="_blank" rel="noopener">https://proj.org/development/threads.html</a><br>每个线程定义自己的上下文对象。<br><img src="https://i.loli.net/2019/12/31/8iAGsWOgYPt2Tw5.png" alt=""></p><p>个人认为，如果某个PJ对象可能在多个线程之中运行，一个PJ对象绑定一个上下文对象也是未尝不可的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近对公司的平台进行多线程绘制改造，咱们公司使用的坐标转换时基于proj.4做的，版本是4.7，偶尔出现部分坐标点转换失败的错误。经过查资料，版本4.7对多线程支持不够友好，于是升级到项目（vs2005）所支持的最高版本5.2，结果还是出现问题。查看5.2版本源码，里面加了
      
    
    </summary>
    
    
    
      <category term="proj.4 多线程" scheme="http://yoursite.com/tags/proj-4-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>proj.4版本升级到5.x、6.x说明</title>
    <link href="http://yoursite.com/2019/12/31/proj-4-verson-update-explain/"/>
    <id>http://yoursite.com/2019/12/31/proj-4-verson-update-explain/</id>
    <published>2019-12-31T06:06:31.000Z</published>
    <updated>2019-12-31T06:35:14.599Z</updated>
    
    <content type="html"><![CDATA[<p>官网：<br><a href="https://proj.org/" target="_blank" rel="noopener">https://proj.org/</a><br>github地址：<br><a href="https://github.com/OSGeo/PROJ" target="_blank" rel="noopener">https://github.com/OSGeo/PROJ</a><br>官网关于版本说明：<br><a href="https://proj.org/news.html" target="_blank" rel="noopener">https://proj.org/news.html</a>  </p><h1 id="1-5-x和6-x更新情况简述"><a href="#1-5-x和6-x更新情况简述" class="headerlink" title="1 5.x和6.x更新情况简述"></a>1 5.x和6.x更新情况简述</h1><p>1、新版本改用C++编写，相比4.9版本代码量增加了不少，功能也多了不少。代码层次结构清晰了许多，比如各种转换算法都在src/transformations目录下可以找到，各种投影方法相关的算法都在src/projections目录可以找到。</p><p>2、支持了从WKT/WKT2字符串和EPSG代码直接创建坐标系对象，也支持导出WKT字符串。老版本中记录EPSG坐标系定义的的nad/epsg被弃用，改用SQLite数据库来记录（在data/sql目录下保存着用于生成proj.db文件的SQL脚本），不过新版本需要依赖SQLite3。</p><p>3、新版的实现使用了缓存机制，在创建操作坐标系对象及搜索查找等都有用到。代码可见 src/iso19111/factory.cpp、src/iso19111/crs.cpp、src/iso19111/coordinateoperation.cpp、</p><p>src/iso19111/coordinateoperation.cpp 等文件。</p><p>4、新版添加了proj_math.h、math.cpp，添加了pj_hypot等函数，这解决了一些编译问题（因为之前版本projects.h中声明了hypot函数，但这个函数在非_WIN32环境中也可能是存在math.h中的）。</p><p>5.注意从6.x开始需要以c++11为基础，我现在所属公司的项目使用vs2005，最高升级版本为5.2.</p><p>6.6.x版本的proj.4字符串会有变化，所以项目之中使用proj.4字符串的相关内容需要进行升级。</p><h1 id="2-PROJ-5-x-更新"><a href="#2-PROJ-5-x-更新" class="headerlink" title="2 PROJ 5.x 更新"></a>2 PROJ 5.x 更新</h1><p>此版本的 PROJ 对系统的大地测量功能 (主要是) 引入了一些重要的扩展和改进。<br>引入新功能的主要驱动因素是动态参考框架的出现、高精度全球导航卫星系统的使用日益增加以及对精确坐标变换的相关需求的增加。虽然旧版本的 PROJ 包含一些大地测量功能, 但新框架为将 PROJ 转变为通用地理空间坐标转换引擎奠定了基础。<br>内部架构也有了许多变化和改进。到目前为止，这些改进都遵循现有的编程接口。但是这个过程已经显示出需要简化和减少代码库，以支持持续的主动开发。<br>新的主要版本号使该项目在名称上留下了一些难题。在产品的大部分使用寿命中，它被称为PROJ.4，但由于我们现在已达到版本5，因此名称不再与版本号对齐。<br>因此，我们决定将名称与版本号和该版本分离，然后将产品简称为PROJ。为了表彰软件的历史，我们将PROJ.4作为组织项目的名称。同一个项目团队也会生成datum-grid 包。  </p><p>综上所述:</p><ul><li>PROJ.4项目提供产品PROJ，现在版本为5.0.0。</li><li>PROJ的基础组件是库libproj。</li><li>其他PROJ组件包括应用程序proj，它为libproj提供命令行界面。</li><li>PROJ.4项目还分发了基准网格(datum-grid)包，在编写本文时，它是1.6.0版本。</li></ul><h2 id="5-0-0-更新"><a href="#5-0-0-更新" class="headerlink" title="5.0.0 更新"></a>5.0.0 更新</h2><p>推出新的API在proj.h</p><ul><li><ul><li>新版API增加了4D空间坐标转换功能</li><li>新API中的函数使用proj_命名空间(名称前缀)</li><li>新API中的数据类型使用PJ_命名空间(名称前缀)</li></ul></li><li><p>引入“转换管道”(transformation pipelines)的概念，可以通过 菊花链 的方式简化坐标操作，可以对坐标进行复杂的大地转换。</p></li></ul><p>采用 OGC/ISO-19100 地理空间标准系列术语。关键定义是：</p><ul><li>在通用层面上，坐标操作是基于从一个坐标参考系统到另一个坐标参考系统的一对一关系的坐标变换。</li><li>变换(transformation )是一种坐标操作，其中两个坐标参考系统基于不同的基准，例如，从全局参考框架改变到区域框架。</li><li>转换(conversion )是一种坐标操作，其中两个坐标参考系统都基于相同的数据，例如，坐标单位的变化。</li><li>投影是从椭球坐标系到平面坐标系的坐标转换。虽然投影只是根据标准进行的转换, 但它们在 PROJ 中被视为单独的实体, 因为它们占库中绝大多数操作。</li></ul><p>新操作</p><ul><li><p>管线操作 The pipeline operator (pipeline)</p><ul><li>变换 Transformations</li><li>霍默特变换 Helmert transform (helmert)</li><li>霍纳实数和复数的多项式评估 (horner)</li><li>Horizontal gridshift (hgridshift)</li><li>Vertical gridshift (vgridshift)</li><li>莫洛金斯基变换 Molodensky transform (molodensky)</li><li>Kinematic gridshift with deformation model (deformation)</li></ul></li><li><p>转换 Conversions</p><ul><li>单位转换 Unit conversion (unitconvert)</li><li>轴向交换 Axis swap (axisswap)</li></ul></li><li><p>投影 Projections</p><ul><li>中央圆锥投影 Central Conic projection (ccon)</li></ul></li><li><p>新的“自由格式”(free format)选项，运行在指定key/value键值对时候通过空白字符进行分割标记，例如proj = merc lat_0 = 45</p></li><li><p>添加到init-files的元数据，可以通过proj.h中新的API函数proj_init_info()读取它们。</p></li><li><p>添加了具有ITRF转换参数的ITRF2000，ITRF2008和ITRF2014初始化文件，包括板块运动模型参数。</p></li><li><p>添加椭球参数到GSK2011,PZ90和”danish”。后者类似于已经支持的andrae椭球体，但长半轴略微不同。</p></li><li><p>添加哥本哈根本初子午线.</p></li><li><p>将EPSG数据库更新至9.2.0版。</p></li><li><p>Geodesic库已更新至1.49.2-c版。</p></li><li><p>对分析性偏导数的支持已被移除。</p></li><li><p>改善了Winkel Tripel和Aitoff的表现。</p></li><li><p>将pj_has_inverse()函数引入proj_api.h，使用它检测一个操作是否可反转，而不是检测P-&gt;inv是否存在。</p></li><li><p>ABI版本号更新为13:0:0。</p></li><li><p>删除了对Windows CE的支持。</p></li><li><p>删除了VB6 COM接口。</p></li></ul><h2 id="5-1-0-更新"><a href="#5-1-0-更新" class="headerlink" title="5.1.0 更新"></a>5.1.0 更新</h2><ul><li>添加函数proj_errno_string() 到 proj.h</li><li>验证管道步骤之间的单位，并确保转换的完整性。</li><li>在没有参数的情况下调用cct和gie程序时打印帮助。</li><li>CITATION文件添加到源码发行。</li><li>添加了Web墨卡托操作。</li><li>提高了赤道附近(4326)向spherical Mercator(3857)前向转换的数值精度。</li><li>为cct添加了–skip-lines选项。</li><li>始终对输入NaN 处返回Nan值。</li><li>移除没有使用的src/org_proj4_Projections.h文件。</li><li>Java Native Interface绑定已更新</li><li>水平和垂直网格移位操作扩展到时域(temporal domain)。<h2 id="5-2-0-更新"><a href="#5-2-0-更新" class="headerlink" title="5.2.0 更新"></a>5.2.0 更新</h2></li><li>在unitconvert中增加了对deg，rad和grad的支持。</li><li>当没有另外指定时，假设+t_epoch为时间输入。</li><li>添加了逆拉格朗日投影。</li><li>添加-multiplier选项到vgridshift。</li><li>添加等地球投影。（等地球地图投影是用于世界地图的新的等面积假圆柱投影）</li><li>为gie添加了“require_grid”选项。</li><li>将 Helmert 变换的+transpose选项替换为+convention。从现在开始应当显示指定convertion使用，使用+transpose选项将返回错误。</li><li>改进的逆spherical Mercator投影数值精度</li><li>当前cct会将前向输入的坐标，转发到输出流。 (#1111)</li></ul><h1 id="3-PROJ-6-x-更新"><a href="#3-PROJ-6-x-更新" class="headerlink" title="3.PROJ 6.x 更新"></a>3.PROJ 6.x 更新</h1><p>PROJ6 进行了广泛的更改, 以增加其功能范围, 从具有所谓 “早期绑定” 大地测量基准转换功能的制图投影引擎, 到更完整的库, 支持坐标变换和坐标参考系统。</p><p>作为其他增强功能的基础, PROJ 现在包括由 iso-19111:2019 标准/OGC 抽象规范主题 2: “按坐标引用” 的模型的 C++ 实现, 用于大地测量参照框 (基准), 坐标参考系统和协调操作。这些大地测量对象的构造和查询可通过新的 C++ API 进行, 并且在很大程度上可以从 C API 中的绑定中访问。</p><p>这些大地测量对象可以从 OGC 已知文本格式 (WKT) 以不同的变体导入和导出: ESRI WKT、GDAL WKT 1、WKT2:2015 (ISO 191.2: 2015) 和 WKT2:2018 (ISO 19162: 2018)。还支持从 PROJ 字符串导入和导出 crs 对象。此功能以前在 GDAL 软件库中可用 (WKT2 支持除外, 这是一项新功能), 现在是 PROJ 不可或缺的一部分。</p><p>现在, sqlite3 数据库文件 proj.db 中提供了一个统一的大地测量对象数据库、坐标参考系统及其元数据以及这些 CRS 之间的坐标操作。这包括从 IOMP EPSG 数据集 (v9.6.0 版本)、法国国家测绘机构大地测量登记册和 ESRI 投影引擎数据库中导入的定义。PROJ 现在是此 CRS 和坐标操作数据库的 “OSGeo C stack” 中的参考软件, 而以前此功能分布在 PROJ、GDAL 和歌词地理, 并使用 CSV 或其他基于特定文本的格式。</p><p>添加了考虑到元数据 (如使用区域和准确性) 的后期绑定坐标操作功能。这可以在许多情况下避免过去使用 WGS84 作为中间系统的要求, 这可能会导致不必要的精度损失, 或者在无法转换到 WGS84 的情况下有时是无法实现的。这些后期绑定功能现在由 proj_create_crs_to_crs() 函数和 cs2cs 实用程序使用。</p><p>添加了一个新的命令行实用程序 projinfo 来查询有关数据库的大地测量对象的信息, 从 WKT 字符串和 PROJ 字符串导入和导出大地测量对象, 并显示两个 CRS(坐标参考系统) 之间可用的坐标操作。</p><h2 id="6-0-0-更新"><a href="#6-0-0-更新" class="headerlink" title="6.0.0 更新"></a>6.0.0 更新</h2><ul><li>公开接口中移除projects.h（当前仅作为内部接口）(#835)</li><li>不推荐使用proj_api.h接口。头文件仍然可用，但将在下一个主要版本的PROJ中删除。现在需要定义ACCEPT_USE_OF_DEPRECATED_PROJ_API_H宏接口才可用。 (#836)</li><li>删除了对nmake构建系统的支持。(#838)</li><li>删除对proj_def.dat 默认文件的支持。 (#201)</li><li>构建PROJ需要支持C++11编译器。</li><li>构建添加对SQLite 3.7的依赖。(#1175)</li><li>添加 projinfo 命令行程序。</li><li>添加一些用于处理ISO19111功能函数的到proj.h。(#1175)</li><li>更新了cs2cs以使用后期绑定特性。(#1182)</li><li>移除 nad2bin 程序。现在可以在proj-datumgrid仓库中查看。</li><li>在proj中删除了对Chebyshev多项式的支持</li><li>从proj.h中移除proj_geocentric_latitude() API</li><li>更改proj行为：现在只允许投影的初始化 (#1162)</li><li>更改tmerc行为：现在默认扩展横轴墨卡托算法 (etmerc)。旧的实现可以通过添加 +approx参数(#404)</li><li>更改行为：默认椭球现在设置为GRS80 (之前是WGS84) (#1210)</li><li>允许在 PROJ_LIB 环境变量中使用多个目录 (#1218)</li><li>添加Lambert Conic Conformal (2SP Michigan) 投影 (#1142)</li><li>添加 Bertin1953 投影 (#1133)</li><li>添加Tobler-Mercator 投影 (#1153)</li><li>添加Molodensky-Badekas 变换 (#1160)</li><li>添加push 和pop 坐标操作 (#1250)</li><li>添加+t_obs 参数，从helmert 和deformation中 (#1264)</li><li>添加+dt 参数到deformation中，用于替换移除的 +t_obs (#1264) </li></ul><h2 id="6-1-0-更新"><a href="#6-1-0-更新" class="headerlink" title="6.1.0 更新"></a>6.1.0 更新</h2><ul><li>包含 QGIS 中定义的椭球 (#1137)</li><li>添加 -k ellipsoid 选项到 projinfo (#1338)</li><li>cs2cs支持4D坐标 (#1355)</li><li>WKT2 解析：更新到OGC 18-010r6 (#1360 #1366))</li><li>更新googletest内部版本到v1.8.1 (#1361)</li><li>数据库更新：EPSG v9.6.2 (#1462), IGNF v3.0.3, ESRI 10.7.0 并添加operation_version列(#1368)</li><li>添加proj_normalize_for_visualization() 尝试应用大多数 GIS 应用和 PROJ &lt;6 * 使用的轴序 (#1387)</li><li>添加 noop（空）操作 (#1391)</li><li>用户设置的路径优先于 PROJ_LIB 搜索路径 (#1398)</li><li>缩小数据库大小 (#1438)</li><li>添加对compoundCRS 和concatenatedOperation组件命名的支持 (#1441)</li></ul><h1 id="4-从PROJ-4向新版本迁移"><a href="#4-从PROJ-4向新版本迁移" class="headerlink" title="4 从PROJ.4向新版本迁移"></a>4 从PROJ.4向新版本迁移</h1><p>以下内容主要来自Version 4 to 5/6 API Migration。<br><a href="https://proj.org/development/migration.html" target="_blank" rel="noopener">https://proj.org/development/migration.html</a></p><p>迁移到5.x版本<br>这是希望将代码迁移到使用PROJ 5的开发人员的过渡指南。</p><p>背景<br>原文太长，这里简单抽取一部分。</p><p>1、之前老的API两个坐标参考系统之间的任何转换都必须通过未明确定义的WGS84框架进行中转，新的API取消了对PROJ中转换的限制。虽然任然可以进行这种类型的转换，但是在多数情况下，有更好的替代方案。</p><p>2、如果你只关心到米级精度，那么旧的API是够用的。但是WGS84并非真实世界的基础，其它一切都可以通过WGS84进行转换的观点是有缺陷的。并且这里说的WGS84是6个实现中的哪一个呢？</p><p>3、对许多坐标系统而言，转换到WGS84，在旧系统之间可能变换精度在厘米级。</p><p>4、hub（这里说的就是把所有坐标之间的转换都通过WGS84做中转）框架（”基准”）概念本身没有大问题。但世界本质是4维的，为了获得大地测量精确变换，可能需要在四个维度下计算，新的API允许这样做。</p><p>旧的API下，坐标从坐标系A转换到坐标系B的过程，需要从A变换到WGS84（反算），再从WGS84变换到B（正算）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo 300000 6100000 | cs2cs +proj&#x3D;utm +zone&#x3D;33 +ellps&#x3D;GRS80 +to +proj&#x3D;utm +zone&#x3D;32 +ellps&#x3D;GRS80</span><br><span class="line">683687.87       6099299.66 0.00</span><br></pre></td></tr></table></figure><p>新的命令行工具cct使用新的API，所以同样的转换可能结果不一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo 300000 6100000 0 0 | cct +proj&#x3D;pipeline +step +inv +proj&#x3D;utm +zone&#x3D;33 +ellps&#x3D;GRS80 +step +proj&#x3D;utm +zone&#x3D;32 +ellps&#x3D;GRS80</span><br><span class="line">683687.8667   6099299.6624    0.0000    0.0000</span><br></pre></td></tr></table></figure><p>转载于：<br><a href="https://blog.csdn.net/weixin_30535913/article/details/99668011" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30535913/article/details/99668011</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官网：&lt;br&gt;&lt;a href=&quot;https://proj.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://proj.org/&lt;/a&gt;&lt;br&gt;github地址：&lt;br&gt;&lt;a href=&quot;https://github.com/OSGeo
      
    
    </summary>
    
    
    
      <category term="proj.4 版本说明 5.x 6.x" scheme="http://yoursite.com/tags/proj-4-%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E-5-x-6-x/"/>
    
  </entry>
  
  <entry>
    <title>centos7编译freeimage库</title>
    <link href="http://yoursite.com/2019/12/30/centos7-Compile-freeimage/"/>
    <id>http://yoursite.com/2019/12/30/centos7-Compile-freeimage/</id>
    <published>2019-12-30T15:34:36.000Z</published>
    <updated>2019-12-30T16:06:21.164Z</updated>
    
    <content type="html"><![CDATA[<p>官网<br><a href="http://freeimage.sourceforge.net/" target="_blank" rel="noopener">http://freeimage.sourceforge.net/</a><br>FreeImage3180.zip  </p><h1 id="1-编译"><a href="#1-编译" class="headerlink" title="1.编译"></a>1.编译</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip FreeImage3170.zip -d freeImage  </span><br><span class="line">cd FreeImage  </span><br><span class="line">sudo make</span><br></pre></td></tr></table></figure><p>编译成功<br><img src="https://i.loli.net/2019/12/31/s3h6Bzemiw7VHNW.png" alt=""></p><p>安装到指定目录（默认在usr/lib目录下面）：<br>sudo make install<br><img src="https://i.loli.net/2019/12/31/QG4jk6Bn8HKZOEv.png" alt=""></p><h1 id="2-检查"><a href="#2-检查" class="headerlink" title="2.检查"></a>2.检查</h1><p>freeimage include路径：<br><img src="https://i.loli.net/2019/12/31/w1TB7PRgCcxGVFJ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官网&lt;br&gt;&lt;a href=&quot;http://freeimage.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://freeimage.sourceforge.net/&lt;/a&gt;&lt;br&gt;FreeImage3180.z
      
    
    </summary>
    
    
    
      <category term="cximage freeimage" scheme="http://yoursite.com/tags/cximage-freeimage/"/>
    
  </entry>
  
  <entry>
    <title>centos7环境编译CxImage</title>
    <link href="http://yoursite.com/2019/12/30/centos7-Compile-cximage/"/>
    <id>http://yoursite.com/2019/12/30/centos7-Compile-cximage/</id>
    <published>2019-12-30T14:55:48.000Z</published>
    <updated>2019-12-30T15:34:14.904Z</updated>
    
    <content type="html"><![CDATA[<p>cximage 主页<br><a href="http://www.xdp.it/cximage/" target="_blank" rel="noopener">http://www.xdp.it/cximage/</a><br> 目前稳定支持windows环境。centos环境待研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cximage 主页&lt;br&gt;&lt;a href=&quot;http://www.xdp.it/cximage/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.xdp.it/cximage/&lt;/a&gt;&lt;br&gt; 目前稳定支持windows环境。cent
      
    
    </summary>
    
    
    
      <category term="centos7 cximage" scheme="http://yoursite.com/tags/centos7-cximage/"/>
    
  </entry>
  
  <entry>
    <title>centos7如何编译boost1.72库</title>
    <link href="http://yoursite.com/2019/12/29/centos7-Compile-boost-blog/"/>
    <id>http://yoursite.com/2019/12/29/centos7-Compile-boost-blog/</id>
    <published>2019-12-29T11:22:22.000Z</published>
    <updated>2019-12-30T14:52:38.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装编译器"><a href="#1-安装编译器" class="headerlink" title="1.安装编译器"></a>1.安装编译器</h1><p>yum -y install gcc gcc-c++ kernel-devel</p><a id="more"></a><h1 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2.下载源码"></a>2.下载源码</h1><p>地址：<a href="http://www.boost.org/" target="_blank" rel="noopener">http://www.boost.org/</a><br>源码包：boost_1_72_0.tar.gz</p><h1 id="3-编译"><a href="#3-编译" class="headerlink" title="3.编译"></a>3.编译</h1><p>tar -zxvf boost_1_72_0.tar.gz<br>cd boost_1_72_0<br>./bootstrap.sh<br>sudo ./b2 install</p><h1 id="4-手动创建boost库安装路径"><a href="#4-手动创建boost库安装路径" class="headerlink" title="4.手动创建boost库安装路径"></a>4.手动创建boost库安装路径</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir &#x2F;usr&#x2F;include&#x2F;boost</span><br><span class="line">$ cp -rf &#x2F;usr&#x2F;local&#x2F;include&#x2F;boost&#x2F;* &#x2F;usr&#x2F;include&#x2F;boost</span><br><span class="line">$ cp -rf &#x2F;usr&#x2F;local&#x2F;lib&#x2F;* &#x2F;usr&#x2F;lib</span><br></pre></td></tr></table></figure><h1 id="5-执行命令"><a href="#5-执行命令" class="headerlink" title="5.执行命令"></a>5.执行命令</h1><p>ldconfig /usr/local/lib</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-安装编译器&quot;&gt;&lt;a href=&quot;#1-安装编译器&quot; class=&quot;headerlink&quot; title=&quot;1.安装编译器&quot;&gt;&lt;/a&gt;1.安装编译器&lt;/h1&gt;&lt;p&gt;yum -y install gcc gcc-c++ kernel-devel&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="boost1.72 centos" scheme="http://yoursite.com/tags/boost1-72-centos/"/>
    
  </entry>
  
</feed>
